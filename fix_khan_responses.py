"""
Script para mejorar las respuestas de Khan en modo fallback
"""
import os

print("üîß Actualizando respuestas de Khan...")

# Leer el archivo actual
with open("app/agents/Khan.py", 'r', encoding='utf-8') as f:
    content = f.read()

# Buscar y reemplazar el m√©todo _generate_fallback_response
old_method = '''    def _generate_fallback_response(self, message: str, mode: str) -> str:
        """
        Generar respuesta de fallback cuando Ollama no est√° disponible
        """
        msg_lower = message.lower()
        
        # Detectar tipo de mensaje
        if any(word in msg_lower for word in ["hola", "hello", "hey", "buenos d√≠as", "buenas"]):
            response = self.fallback_responses["greeting"]
        elif any(word in msg_lower for word in ["ayuda", "help", "qu√© puedes", "what can"]):
            response = self.fallback_responses["help"]
        elif any(word in msg_lower for word in ["estado", "status", "c√≥mo est√°s"]):
            response = self.fallback_responses["status"]
        else:
            response = self.fallback_responses["unknown"]
        
        # Ajustar seg√∫n modo
        if mode == "skynet":
            response = response.split('.')[0] + ". Procesando."
        elif mode == "jarvis":
            response += " Y s√≠, mi sarcasmo est√° finamente calibrado hoy."
        
        return response'''

new_method = '''    def _generate_fallback_response(self, message: str, mode: str) -> str:
        """
        Generar respuesta de fallback cuando Ollama no est√° disponible
        """
        msg_lower = message.lower()
        
        # Respuestas contextuales mejoradas
        responses_by_context = {
            # Saludos
            "greeting": [
                "Hola. Khan operacional y listo para asistir.",
                "Saludos. ¬øEn qu√© puedo ayudarte hoy?",
                "Khan a tu servicio. Sistemas online.",
            ],
            
            # C√≥digo y programaci√≥n
            "code": [
                "Para programaci√≥n, te recomiendo: dividir el problema, escribir pseudoc√≥digo, implementar, probar. ¬øNecesitas ayuda con alg√∫n lenguaje espec√≠fico?",
                "Desarrollo de software: claridad en requisitos, c√≥digo limpio, testing exhaustivo. ¬øQu√© tecnolog√≠a est√°s usando?",
                "Python, JavaScript, SQL... Especifica el lenguaje y el problema para darte una soluci√≥n concreta.",
            ],
            
            # An√°lisis y datos
            "analysis": [
                "Para an√°lisis efectivo: define objetivos, recopila datos relevantes, usa m√©tricas claras, interpreta resultados con contexto.",
                "An√°lisis de datos requiere: limpieza de datos, exploraci√≥n, visualizaci√≥n, modelado. ¬øQu√© aspecto necesitas?",
                "El an√°lisis correcto empieza con las preguntas correctas. ¬øQu√© intentas descubrir?",
            ],
            
            # Problemas t√©cnicos
            "technical": [
                "Problema t√©cnico detectado. Pasos: 1) Identifica el error exacto, 2) Revisa logs, 3) Verifica configuraci√≥n, 4) Prueba soluciones incrementales.",
                "Debugging sistem√°tico: reproduce el error, a√≠sla la causa, implementa fix, valida soluci√≥n. ¬øQu√© error espec√≠fico tienes?",
                "Para resolver esto: documenta el comportamiento esperado vs actual, revisa cambios recientes, verifica dependencias.",
            ],
            
            # Estrategia y planificaci√≥n
            "strategy": [
                "Planificaci√≥n efectiva: define objetivo claro, identifica recursos, establece hitos, mide progreso, ajusta seg√∫n resultados.",
                "Estrategia requiere: an√°lisis de situaci√≥n actual, definici√≥n de meta, plan de acci√≥n, m√©tricas de √©xito. ¬øCu√°l es tu objetivo?",
                "Para optimizar esto: eval√∫a opciones, calcula coste-beneficio, prioriza por impacto, ejecuta con agilidad.",
            ],
            
            # Seguridad
            "security": [
                "Seguridad cr√≠tica. Prioridades: autenticaci√≥n robusta, encriptaci√≥n de datos sensibles, auditor√≠a de accesos, actualizaciones regulares.",
                "Protocolo de seguridad: eval√∫a vulnerabilidades, implementa capas de protecci√≥n, monitorea actividad, responde r√°pido a incidentes.",
                "Seguridad no es opcional. Revisa: permisos, autenticaci√≥n, datos expuestos, logs de acceso. ¬øD√≥nde est√° la brecha?",
            ],
            
            # Aprendizaje
            "learning": [
                "Para aprender efectivamente: comienza con fundamentos, practica activamente, construye proyectos reales, itera y mejora.",
                "El aprendizaje es iterativo: teor√≠a + pr√°ctica + feedback. ¬øQu√© tecnolog√≠a quieres dominar?",
                "Aprende haciendo: proyectos peque√±os, incrementa complejidad, consulta documentaci√≥n, experimenta sin miedo al error.",
            ],
            
            # General/Desconocido
            "unknown": [
                "Procesa tu consulta. Para respuesta √≥ptima, proporciona m√°s contexto: ¬øqu√© intentas lograr? ¬øqu√© has probado?",
                "Entiendo tu pregunta. Detalles adicionales ayudar√≠an: objetivo, contexto actual, restricciones espec√≠ficas.",
                "Consulta recibida. Para asistencia precisa: especifica el problema, entorno, y resultado deseado.",
            ]
        }
        
        # Detecci√≥n de contexto mejorada
        context = "unknown"
        
        # Palabras clave por contexto
        if any(word in msg_lower for word in ["hola", "hello", "hey", "buenos", "buenas", "qu√© tal"]):
            context = "greeting"
        elif any(word in msg_lower for word in ["c√≥digo", "programar", "function", "class", "python", "javascript", "sql", "bug", "syntax"]):
            context = "code"
        elif any(word in msg_lower for word in ["analizar", "an√°lisis", "datos", "estad√≠stica", "m√©tricas", "dashboard"]):
            context = "analysis"
        elif any(word in msg_lower for word in ["error", "fallo", "no funciona", "problema t√©cnico", "crash", "bug"]):
            context = "technical"
        elif any(word in msg_lower for word in ["estrategia", "plan", "optimizar", "mejorar", "eficiencia", "proyecto"]):
            context = "strategy"
        elif any(word in msg_lower for word in ["seguridad", "vulnerabilidad", "ataque", "proteger", "encriptar", "autenticaci√≥n"]):
            context = "security"
        elif any(word in msg_lower for word in ["aprender", "tutorial", "c√≥mo", "ense√±ar", "curso", "estudiar"]):
            context = "learning"
        
        # Seleccionar respuesta seg√∫n contexto
        response = random.choice(responses_by_context.get(context, responses_by_context["unknown"]))
        
        # Ajustar seg√∫n modo
        if mode == "skynet":
            # Modo serio: directo y sin adornos
            response = response.split('.')[0] + '.'
            if len(response) < 50:  # Si la respuesta es muy corta, a√±adir acci√≥n
                response += " Especifica detalles para an√°lisis preciso."
        elif mode == "jarvis":
            # Modo J.A.R.V.I.S.: a√±adir toque de personalidad
            if context == "greeting":
                response += " ¬øOtro desaf√≠o intelectual hoy?"
            elif random.random() < 0.3:  # 30% de las veces a√±ade sarcasmo
                sarcastic_endings = [
                    " Aunque seguro ya lo sab√≠as.",
                    " F√°cil, ¬øverdad?",
                    " B√°sico, pero efectivo.",
                ]
                response += random.choice(sarcastic_endings)
        
        return response'''

# Actualizar el contenido
if old_method in content:
    content = content.replace(old_method, new_method)
    
    # Guardar el archivo actualizado
    with open("app/agents/Khan.py", 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ Khan.py actualizado exitosamente!")
    print("\nüìä Mejoras aplicadas:")
    print("   ‚úÖ Respuestas contextuales inteligentes")
    print("   ‚úÖ Detecci√≥n de 8 contextos diferentes")
    print("   ‚úÖ M√∫ltiples respuestas por contexto")
    print("   ‚úÖ Modo Skynet m√°s inteligente")
    print("   ‚úÖ Modo J.A.R.V.I.S. con m√°s personalidad")
    print("\nüéØ Contextos detectados:")
    print("   ‚Ä¢ Saludos")
    print("   ‚Ä¢ C√≥digo/Programaci√≥n")
    print("   ‚Ä¢ An√°lisis de datos")
    print("   ‚Ä¢ Problemas t√©cnicos")
    print("   ‚Ä¢ Estrategia")
    print("   ‚Ä¢ Seguridad")
    print("   ‚Ä¢ Aprendizaje")
    print("   ‚Ä¢ General")
    
else:
    print("‚ö†Ô∏è  No se encontr√≥ el m√©todo a actualizar.")
    print("   El archivo Khan.py podr√≠a estar modificado.")
    print("   Revisa manualmente el m√©todo _generate_fallback_response")

print("\nüöÄ Reinicia Khan AI para aplicar los cambios:")
print("   python run.py")

input("\nPresiona Enter para salir...")
